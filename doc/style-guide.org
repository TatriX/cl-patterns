#+TITLE: cl-patterns style guide

Just a basic overview of things you should do when defining a pattern, for consistency.

* Don't setf the ~remaining~ slot of patterns.

** pattern slots should be called ~length~ when the determine the total length of the pattern, and ~repeats~ when they determine the number of times the pattern (or the list the pattern refers to) should repeat.
For example, ~pser~ uses ~length~ because it only yields LENGTH outputs, while ~pseq~ uses ~repeats~ because it yields the full list REPEATS times.

* Use ~defpattern~ to create patterns. ~defpattern~ generates and exports the function that creates a pattern. Only override the function generated if absolutely necessary.

** Provide sensible defaults for pattern slots, i.e. by default ~pseries~ starts at 0, increases by 1, and has a length of infinity. ~pgeom~ starts at 1, multiplies by 2, and has a length of infinity.

** Avoid outputting values that might cause problems, i.e. if your pattern might be used for a ~pbind~'s ~:dur~ key, avoid yielding 0. 0 is also troublesome because dividing by zero is bad.

** If you have to override the function generated by ~defpattern~ then make sure you use the same docstring you provided to ~defpattern~ for consistency.

* Provide docstrings for patterns you write

** Provide at least one example in the docstring.

** Try to provide a "See also" section in the docstring.

* Write tests for the patterns you create

* Use proper terminology:

** output: whatever a pstream returns when its ~next~ method is called.

** yield: when a pstream returns something, it's called yielding, since it's not the same as a regular function.

** value: generally anything that isn't an event: number, symbol, etc.

** event: an object representing a mapping of keys to values, defined in ~event.lisp~.
