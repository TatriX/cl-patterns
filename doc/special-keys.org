#+TITLE: Event Special Keys

This is a list of special keys for events/pbind. These keys have additional functionality to do things like alter how the pattern is played, automate conversions between types, etc. Some of these only work in pbinds, and have no effect in events.

* Event builtins and conversions

Some event keys are used to set standard parameters for the synth (i.e. ~instrument~, ~out~, etc). Additionally, cl-patterns will automatically convert between different units of measurement for data that represents the same property. For example, you can write a pattern that generates pitches based on midi note numbers with ~midinote~. Then, in another key after that, you can use ~(pk :freq)~ to get the frequency of the note (which is automagically converted from the ~midinote~ value, as if you had used ~midinote-freq~ on it).

** ~instrument~
Name of the synth you want to trigger.
** ~group~
NOTE: Not implemented yet.

Group to put the synth in on the server.
** ~out~
Bus that the synth should write its output to.
** ~amp~ / ~db~
Volume of the synth.
** ~pan~
Stereo panning of the synth's output.
** ~tempo~
Set the clock's tempo.
** ~dur~ / ~delta~
How long before the next note starts. ~dur~ also affects the sustain time of the note (see ~sustain~ / ~legato~, below)
** ~beat~
NOTE: Not implemented yet.

When the event should play (relative to when the pbind started playing).
** ~sustain~ / ~legato~
How long the synth is held before being released. ~sustain~ is an absolute time in beats for the note to be held, while ~legato~ is multiplied by ~dur~ to get the sustain time.
** ~timing-offset~
NOTE: Not implemented yet.

The timing offset of the event, added onto the time when it would normally occur.

FIX: Not sure if this should be in beats or seconds.
** ~freq~ / ~midinote~ / ~degree~ + ~octave~ + ~root~ + ~scale~
Various ways to specify the pitch of the synth.

* pbind special init keys

pbind supports a set of special keys that, during the initialization of the pbind, run a function which may alter the pbind's pattern-pairs, or alter the pattern in another way. For example, a pbind that looks like this:

#+BEGIN_SRC lisp
  (defparameter *pat* (pbind :foo (pseq '(1 2 3))
                             :quant 4))
#+END_SRC

...is effectively shorthand for this:

#+BEGIN_SRC lisp
  (defparameter *pat* (pbind :foo (pseq '(1 2 3))))

  (setf (slot-value *pat* 'cl-patterns::quant) 4)
#+END_SRC

Here is a listing of all of the pbind special init keys:

** ~remaining~
Sets the pattern's ~remaining~ slot, which limits the number of results it will yield. This is now officially deprecated in favor of using ~pfin~; see its section under "special wrap keys" below.
** ~quant~
Set the ~quant~ of the pattern, which determines when the pattern is allowed to start playing.
** ~cleanup~
NOTE: Not implemented yet.

A function or list of functions to be run when the pattern ends or is stopped.

* pbind special wrap keys

pbind also supports a set of special keys that effectively "wrap" the pbind in another type of pattern. For example, a pbind that looks like this:

#+BEGIN_SRC lisp
  (pbind :midinote (pseq '(60 62 64) 1)
         :pdurstutter (pseq '(3 2 1) 1))
#+END_SRC

...actually returns this pattern:

#+BEGIN_SRC lisp
  (pdurstutter (pbind :midinote (pseq '(60 62 64) 1))
               (pseq '(3 2 1) 1))
#+END_SRC

Here is a listing of all such keys:

** ~parp~
Results in ~(parp (pbind ...) value)~
** ~pfin~
Results in ~(pfin (pbind ...) value)~
** ~pfindur~
Results in ~(pfindur (pbind ...) value)~
** ~psync~
Results in ~(psync (pbind ...) value value)~

or ~(psync (pbind ...) (first value) (second value))~
** ~pdurstutter~
Results in ~(pdurstutter (pbind ...) value)~
** ~ptrace~
Results in ~(ptrace (pbind ...))~ when value is ~t~

or traces the specified key when value is the name of a key.
** ~pr~
Results in ~(pr (pbind ...) value)~
** ~pdef~
Results in ~(pdef value (pbind ...))~

Unlike other wrap keys or init keys, this key is always processed last regardless of where it appears in the pbind.
** ~pmeta~
Results in ~(pmeta (pbind ...))~

* pbind special process keys

pbind's last type of special keys are the process keys. Unlike the init and wrap keys, the values associated with these keys are processed for each output yielded by the pbind instead of only once during its initialization. Typically these are used to alter the outputs yielded. For example, this pbind:

#+BEGIN_SRC lisp
  (pbind :foo (pseq '(1 2 3))
         :inject (pbind :bar (pseq '(9 8 7) 1)))
#+END_SRC

...yields these events as its output:

#+BEGIN_SRC lisp
  ((EVENT :FOO 1 :BAR 9)
   (EVENT :FOO 2 :BAR 8)
   (EVENT :FOO 3 :BAR 7))
#+END_SRC

This is because the ~inject~ key injects whatever its value's outputs are into the pbind's output events.

Here is a listing of all special process keys:

** ~inject~
Injects its value's outputs into the pbind's output events.
** ~pbeat~
NOTE: Not implemented yet.

The number of beats elapsed in the pattern. This can be set as an alternative to ~dur~ or ~delta~ if you want to give an event's start beat instead of its inter-onset time.

If you are setting this from a pattern, you need to make sure its values do not decrease with successive events otherwise event scheduling will fail.

* pmeta keys

~pmeta~ is a "meta" pattern; instead of events triggering sounds directly, the events read by pmeta trigger other patterns.

** ~pattern~ / ~instrument~
name of the source pattern for this "step".
** ~sustain~
limit the duration of the embedded pattern (defaults to :inf, which causes the pattern to play to its end).

The following keys are planned for future implementation:

** ~stretch~
multiply the duration of each of the source pattern's events.
** ~fit~ / ~ts~
fit a pattern to a number of beats, by getting up to ~*max-pattern-yield-length*~ events from the source pattern, then scaling their total duration.
** ~start~ / ~end~
adjust the start or end points of the source pattern (i.e. to skip the first half, set ~:start~ to 0.5)
** ~start-beat~ / ~end-beat~
adjust the start or end points of the source pattern in number of beats (i.e. to end the pattern 2 beats early, set ~:end-beat~ to -2)
** ~start-nth~ / ~end-nth~
adjust the start or end points of the source pattern by skipping the first or last N events.
** ~filter~ / ~remove-if~
skip all events from the source pattern that return nil when applied to the specified function or pattern.
** ~mapcar~ / ~nary~
process each event from the source pattern with a function or another pattern.

