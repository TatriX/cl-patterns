#+TITLE: Event Special Keys

This is a list of special keys for events/pbind. These keys have additional functionality to do things like alter how the pattern is played, automate conversions between types, etc. Some of these only work in pbinds, and have no effect in events.

* Event builtins and conversions

Some event keys are used to set standard parameters for the synth (i.e. ~instrument~, ~out~, etc). Additionally, cl-collider will automatically convert between different units of measurement for data that represents the same property. For example, you can write a pattern that generates pitches based on midi note numbers with ~midinote~. Then, in another key after that, you can use ~(pk :freq)~ to get the frequency of the note (which is automagically converted from the ~midinote~ value, as if you had used ~midinote-freq~ on it).

** ~instrument~ / ~inst~
Name of the synth you want to trigger.
** ~group~
Group to put the synth in on the server.
NOTE: Not implemented yet.
** ~out~
Bus that the synth should write its output to.
** ~amp~ / ~db~
Volume of the synth.
** ~pan~
Stereo panning of the synth's output.
** ~tempo~
Set the clock's tempo.
** ~dur~ / ~delta~
How long before the next note starts.
** ~sustain~ / ~legato~
How long the synth is held before being released.
** ~timing-offset~
The timing offset of the event, added onto the time when it would normally occur.
NOTE: Not implemented yet.
FIX: Not sure if this should be in beats or seconds.
** ~freq~ / ~midinote~ / ~degree~ + ~octave~ + ~root~ + ~scale~
Various ways to specify the pitch of the synth.

* pbind special init keys

pbind supports a set of special keys that, during the initialization of the pbind, run a function which may inject key/value pairs into the pbind's pattern-pairs, or alter it in another way. For example, a pbind like this:

#+BEGIN_SRC lisp
  (pbind :foo (pseq '(1 2 3))
         :remaining 4)
#+END_SRC

...will only return four results, because the ~:remaining~ key injects its value into the pbind's ~remaining~ slot.

Here is a listing of all of the pbind special init keys:

** ~remaining~
Sets the pattern's ~remaining~ slot, which limits the number of results it will yield.
** ~inst~
Effectively an alias for the ~instrument~ key. This may be removed in the future.
** ~quant~
Set the ~quant~ of the pattern, which determines when the pattern is allowed to start playing.

* pbind special wrap keys

pbind also supports a set of special keys that effectively "wrap" the pbind in another type of pattern. For example, a pbind that looks like this:

#+BEGIN_SRC lisp
  (pbind :midinote (pseq '(60 62 64) 1)
         :pdurstutter (pseq '(3 2 1) 1))
#+END_SRC

...actually returns this pattern:

#+BEGIN_SRC lisp
  (pdurstutter (pbind :midinote (pseq '(60 62 64) 1))
               (pseq '(3 2 1) 1))
#+END_SRC

Here is a listing of all such keys:

** ~parp~
Results in ~(parp (pbind ...) value)~
** ~pfin~
Results in ~(pfin (pbind ...) value)~
** ~pfindur~
Results in ~(pfindur (pbind ...) value)~
** ~psync~
Results in ~(psync (pbind ...) value value)~
or ~(psync (pbind ...) (first value) (second value))~
** ~pdurstutter~
Results in ~(pdurstutter (pbind ...) value)~
** ~ptrace~
Results in ~(ptrace (pbind ...))~ when value is ~t~
or traces the specified key when value is the name of a key.
** ~pr~
Results in ~(pr (pbind ...) value)~
** ~pdef~
Results in ~(pdef value (pbind ...))~
Unlike other wrap keys or init keys, this key is always processed last regardless of where it appears in the pbind.

* pbind special process keys

pbind's last type of special keys are the process keys. Unlike the init and wrap keys, the functions associated with these keys are run for each output yielded by the pbind instead of only once during its initialization. Typically these are used to alter the outputs yielded. For example, this pbind:

#+BEGIN_SRC lisp
  (pbind :foo (pseq '(1 2 3))
         :inject (pbind :bar (pseq '(9 8 7) 1)))
#+END_SRC

...yields these events as its output:

#+BEGIN_SRC lisp
  ((EVENT :FOO 1 :BAR 9)
   (EVENT :FOO 2 :BAR 8)
   (EVENT :FOO 3 :BAR 7))
#+END_SRC

This is because the ~inject~ key injects whatever its value's outputs are into the pbind's output events.

Here is a listing of all special process keys:

** ~inject~
Injects its value's outputs into the pbind.
** ~pbeat~
The number of beats elapsed in the pattern. This can be set as an alternative to ~dur~ or ~delta~ if you want to give an event's start beat instead of its inter-onset time.
If you are setting this from a pattern, you need to make sure its values do not decrease with successive events otherwise event scheduling will fail.
NOTE: Not implemented yet.
