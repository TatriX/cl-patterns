#+TITLE: Event Special Keys

This is a list of special keys for events/pbind. These keys have additional functionality to do things like alter how the pattern is played, automate conversions between types, etc. Some of these only work in pbinds, and have no effect in events.

* Event builtins and conversions

Some event keys are used to set standard parameters for the synth (i.e. ~instrument~, ~out~, etc). Additionally, cl-collider will automatically convert between different units of measurement for data that represents the same property. For example, you can write a pattern that generates pitches based on midi note numbers with ~midinote~. Then, in another key after that, you can use ~(pk :freq)~ to get the frequency of the note (which is automagically converted from the ~midinote~ value, as if you had used ~midinote-freq~ on it).

** ~instrument~ / ~inst~ - name of the synth you want to trigger.
** ~amp~ / ~db~ - volume of the synth.
** ~freq~ / ~midinote~ / ~degree~ + ~octave~ + ~root~ - various ways to specify the pitch of the synth.
** ~dur~ / ~delta~ - how long before the next note starts.
** ~sustain~ / ~legato~ - how long the synth is held before being released.
** ~tempo~ - set the clock's tempo.
** ~pdef~ - the name of the pattern. (see the ~pdef~ pattern for more information.)
** ~pbeat~ - how many beats have elapsed in the pattern.

* pbind special init keys

pbind supports a set of special keys that, during the initialization of the pbind, run a function which may inject key/value pairs into the pbind's pattern-pairs, or alter it in another way. For example, a pbind like this:

#+BEGIN_SRC lisp
  (pbind :foo (pseq '(1 2 3))
         :remaining 4)
#+END_SRC

...will only return four results, because the ~:remaining~ key injects its value into the pbind's ~remaining~ slot.

Here is a listing of all of the pbind special init keys:

** ~remaining~
Sets the pattern's ~remaining~ slot, which limits the number of results it will yield.
** ~inst~
Effectively an alias for the ~instrument~ key. This may be removed in the future.

* pbind special wrap keys

pbind also supports a set of special keys that effectively "wrap" the pbind in another type of pattern. For example, a pbind that looks like this:

#+BEGIN_SRC lisp
  (pbind :midinote (pseq '(60 62 64) 1)
         :pdurstutter (pseq '(3 2 1) 1))
#+END_SRC

...actually returns this pattern:

#+BEGIN_SRC lisp
  (pdurstutter (pbind :midinote (pseq '(60 62 64) 1))
               (pseq '(3 2 1) 1))
#+END_SRC

Here is a listing of all such keys:

** ~parp~
Results in ~(parp (pbind ...) value)~
** ~pfin~
Results in ~(pfin (pbind ...) value)~
** ~pfindur~
Results in ~(pfindur (pbind ...) value)~
** ~psync~
Results in ~(psync (pbind ...) value value)~
or ~(psync (pbind ...) (first value) (second value))~
** ~pdurstutter~
Results in ~(pdurstutter (pbind ...) value)~
** ~ptrace~
Results in ~(ptrace (pbind ...))~
** ~pr~
Results in ~(pr (pbind ...) value)~

* pbind special process keys

pbind's last type of special keys are the process keys. Unlike the init and wrap keys, the functions associated with these keys are run for each output yielded by the pbind instead of only once during its initialization. Typically these are used to alter the outputs yielded. For example, this pbind:

#+BEGIN_SRC lisp
  (pbind :foo (pseq '(1 2 3))
         :inject (pbind :bar (pseq '(9 8 7) 1)))
#+END_SRC

...yields these events as its output:

#+BEGIN_SRC lisp
  ((EVENT :FOO 1 :BAR 9)
   (EVENT :FOO 2 :BAR 8)
   (EVENT :FOO 3 :BAR 7))
#+END_SRC

This is because the ~inject~ key injects whatever its value's outputs are into the pbind.

Here is a listing of all special process keys:

** ~inject~
Injects its value's outputs into the pbind.
