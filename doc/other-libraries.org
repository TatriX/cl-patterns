#+TITLE: Other Libraries

This document is a list of other libraries that you may find useful in conjunction with cl-patterns, and libraries with similar goals.

* Lisp

** [[https://github.com/byulparan/cl-collider][cl-collider]]
The primary backend that cl-patterns was developed against, a Lisp interface to the SuperCollider sound server.

** [[http://incudine.sourceforge.net/][Incudine]]
Another supported backend for cl-patterns. Written from the ground up and designed to be used with Lisp.

** [[http://cl21.org/][cl21]]
"Common Lisp for the 21st century". Extends and enhances Common Lisp with improvements to the syntax and functionality. May be useful for livecoders since many of its changes make Lisp more consistent and succinct.

** [[https://github.com/vseloved/rutils][rutils]]
"Radical Utilities for Common Lisp". Extends Common Lisp with many additional functions and syntactic sugar, but unlike CL21 it remains backwards compatible with standard Common Lisp.

** [[https://common-lisp.net/project/mcclim/][McCLIM]]
A native Lisp graphical user interface library. Uses Lisp idioms and ideas for the development of user interaction modes. May be useful for visualization of pattern or other musical data, and interaction with the Lisp process.

** [[https://github.com/cbaggers/cepl][CEPL]]
"Code Evaluate Play Loop". A project that attempts to make programming graphics on the GPU feel native to Lisp. Perhaps the "video" to cl-collider/cl-patterns' "audio"?

** [[https://github.com/vydd/sketch][Sketch]]
Common Lisp environment for the creation of visual art, game prototyping, etc. Similar in operation to the [[https://processing.org/][Processing]] (Java) library.

* Non-Lisp

** [[https://supercollider.github.io/][SuperCollider]]
Audio engine, programming language and IDE. Includes the original patterns system that cl-patterns was based on, as well as scsynth, the primary backend cl-patterns was written for.

** [[https://tidalcycles.org/][TidalCycles]]
Pattern sequencing library written in Haskell. Also uses SuperCollider as a backend. It's the inspiration for the ~pcycles~ pattern included in cl-patterns.

** [[http://www.pawfal.org/fluxus/][Fluxus]]
Racket (Scheme-like)-based environment for the live coding of 3D graphics and games. Includes functionality for simple analysis of audio and functions to handle OSC messages.
