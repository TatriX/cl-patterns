#+TITLE: TODO

This is just a list of various ideas, or tasks that need to be done for this library. For a list of overall project goals, see [[file:roadmap.org][roadmap.org]].

* write more documentation
** DONE docstrings for all patterns
CLOSED: [2018-07-01 Sun 18:01]
** DONE "how to write pattern classes" document
CLOSED: [2018-07-01 Sun 18:01]
** DONE event/pbind special keys
CLOSED: [2018-07-01 Sun 18:01]
** DONE readtable/syntax shortcuts
CLOSED: [2018-07-01 Sun 18:01]

* ~tsubseq~ function for getting a subsequence based on start times of events.
** ~tsubseq*~ function. same as ~tsubseq~ but it also includes synths that would've already been playing at the start time specified.
  * i.e. ~(tsubseq* (pbind :dur 2 :foo (pseq '(1 2 3))) 1 4)~ returns ~(list (event :dur 1 :foo 1) (event :dur 2 :foo 2))~

* do "static" things to "dynamic" patterns - i.e. ~(pshift (pseq '(1 2 3)) 1)~ results in ~(3 1 2 3 1 2 3 ...)~ or the like. would work with event patterns too obviously and should "fail" gracefully by still giving output even if the source pattern is infinite-length (maybe just only operate on the first 16 beats, events, or output values by default for infinite patterns).

* more metadata in patterns and streams so that it's easier to write functions that process streams/patterns/etc
** DONE automatically record output from pstreams so it can be referenced later - store ~*max-pattern-yield-length*~ values from each pattern.
CLOSED: [2018-08-02 Thu 23:03]
*** make a ~current~ function that will get the last value that was output from a pstream.

* make it possible to easily create lfos for the synth's parameters
** can embed a synth definition (~sc:defsynth~) as the value, in which case the synth is triggered at the start of each pattern (or maybe for each event?)
** can embed a ~sc:proxy~, in which case the pattern just takes values from the output of the proxy.
** can embed an Env, in which case a env-playing synth is mapped to the triggered synth's parameter.
** maybe make it possible to change whether to retrigger for each event or just have the synth/env play for the duration of the pattern. perhaps retrigger if the synth/env is the result of an embedded pbind, but play for the duration if it's just a lone env/synthdef.

* make it possible to send out values at a specific key at a different rate
** i.e.: ~(pbind :dur 1 :foo (pseq '(1 2 3)) :bar (pbind :dur 1/2 :val (pseq '(9 8 7))))~ results in ~:foo~ being set to 1, then 2, then 3 on every beat, while ~:bar~ is set to 9, then 8, then 7 on every half beat. effectively, the :bar sub-pattern is independent from the main pbind, it's just launched at the same time and ends at the same time.

* make macros to quickly write out patterns with symbols, i.e. ~k---s---k---s---~ for a kick/snare/kick/snare pattern or the like.

* add more tests to [[file:~/misc/lisp/cl-patterns/src/tests.lisp][tests.lisp]]
** add tests for clock behavior
* make patterns able to trigger other patterns
** maybe something like this?
#+BEGIN_SRC lisp
(progn
  (play (pbind :name :bar :pefollow :foo :timing-offset 0.25))
  (play (pbind :name :foo :dur (pseq '(0.5 0.5 0.5 0.5 1 1)))))
#+END_SRC
...then the ~:bar~ pattern's events will play 0.25 beats after each of ~:foo~'s events play, because it's set to ~:pefollow~ that pattern.
*** similarly, a ~:pfollow~ key could be used to automatically start the pattern for each event of the source pattern. the default event would be the event from the source pattern that triggered the subpattern to play.
** or maybe have an ~:action~ key for patterns that can be used to fork the pattern, launch another pattern, etc...?
** allow a pattern play another by using it for its ~:instrument~ key. example:
#+BEGIN_SRC lisp
  (pdef :foo (pbind :midinote (pseq '(40 50 60) 1)
                    :dur 1))

  (pdef :bar (pbind :instrument :foo
                    :dur 2
                    :legato 1
                    :pfin 2))

  (next-upto-n (pdef :bar))

  ;;...results in ((EVENT :MIDINOTE 40 :DUR 1) (EVENT :MIDINOTE 50 :DUR 1) (EVENT :MIDINOTE 40 :DUR 1) (EVENT :MIDINOTE 50 :DUR 1))
#+END_SRC

* ~:cleanup~ key for patterns. this can either contain a function or a list of functions. when the pattern ends or is stopped, the function or functions will be called.
** not sure if it should be called if the pattern is swapped out while playing, i.e. through pdef redefintion or the like.

* patterns from SuperCollider - see [[file:sc.org][sc.org]]

* ~pclockdm~ - clock divider/multiplier pattern. could be used, for example, for a pattern that's set to ~:pfollow~ another pattern, to make it trigger twice as often, half as often, etc. for half as often, patterns would have to have their own ~gensym~ s or IDs so that it could be kept track of whether or not to trigger the sub-pattern for each event. this ID would probably have to be associated with the pattern itself, not the pstream. could maybe be like the ~number~ slot but for the number of times the pattern is played, not the number of events in the pstream.

* events with lists as values should be automatically multichannel-expanded as the last step before being played, and those lists/events should be handled properly by the pattern system prior to that.
** DONE basic pre-backend multichannel expansion
CLOSED: [2018-08-09 Thu 19:39]
** TODO patterns automatically and correctly handle/coerce lists as values

* ~pmetropolis~ - intellijel metropolis-inspired pattern class (maybe a mini-language for compactly representing durstutters, etc).
** i.e., could be something like this:
#+BEGIN_SRC lisp
  (pmetropolis
   (pbind :instrument :acid
    :midinote (pseq '(60 59 58 57 56 55 54 53) :inf))
   5s 2h+ 2r 2o 0 3 2h- 1)
#+END_SRC
this pattern would stutter 60 for 5 pulses, hold 59 for 2 pulses with a slide into 58 (~+~ meaning slide), rest for 2 pulses (instead of playing 58), play 57 for 1 pulse and then rest for a pulse, skip 56 entirely (0 pulses), play 55 once and then rest 2 pulses (default step mode is "once"), skip 54 entirely (~-~ means skip), play 53 for one pulse, and then loop.
** maybe don't make it a macro so the step pattern could be a pseq, prand, etc?

* ~pgatestorm~ - erogenous tones gatestorm-inspired pattern class with a mini-language for writing trigger-based patterns.

* define a ~cl-patterns/basic~ system as a more minimal system that does not include clock or event special keys.
** define ~cl-patterns/clock~ for the clock.
** define ~cl-patterns/music-events~ for the event special keys.
* look into https://github.com/triss/ChordSymbol
* ~pprocess~ - dsl for altering patterns. (maybe call it ~pfor~ instead?)
** accepts statements like these:
- ~for last 2 notes in (pbind :midinote (pseq '(60 58 56 55) 1)) set :dur 2~
- ~for only (= (mod (slot-value e 'number) 2) 0) in (pbind :midinote (pseq '(60 58 56 55) 1)) set :midinote (p+ 12 (pk :midinote))~
* pattern that automatically calculates sample ~:start~ and ~:end~ from onsets data (in the form of an event stream, which can then be ~:inject~-ed) for synths that play sections of a sound.
* special key for patterns that lets you specify the beat that an event starts on directly, rather than it being determined by inter-onset times with ~:dur~ or the like.
- would probably be relative to the start of the pattern.
- probably couldn't be an event special key since context is needed to derive the duration/start time, etc.
* DONE improve clock.lisp and various backends support by abstracting away time and converting it to each backend's representation when necessary, etc.
CLOSED: [2018-07-01 Sun 18:02]
** TODO abstract away envelopes, buffers, buses so they work consistently regardless of the backend
* DONE make sure multiple backends can be used simultaneously
CLOSED: [2018-07-01 Sun 18:02]
* generalize the library
make other libraries that expand upon cl-patterns' feature sets (i.e. libraries for live coding conveience macros, etc.)
* music theory
** make sure the functionality in [[file:~/misc/lisp/cl-patterns/src/scales.lisp][scales.lisp]], etc, is correct.
* DONE "performance mode"
CLOSED: [2018-07-01 Sun 18:02]
...where any pattern that signals a condition/error is automatically removed from the clock, so the music doesn't come to a screeching halt.
still trying to think of ideas for how to make a good "performance mode" without just dumbly removing any patterns with errors... (is it possible to continue the rest of the clock's tasks while the user/coder is responding to the error condition?)
* pattern plotting
** via vgplot
** interactively, via (Mc)CLIM
* pgeom/pseries fromEndPoints
* "triggered mode" that causes patterns that proceed to the next event only when they receive an external trigger
** keys like ~dur~ and ~delta~ would no longer have effect. perhaps enable triggered mode by setting a pattern's ~dur~ to ~:trigger~ instead of a number?
** ~legato~ and ~sustain~ would have limited effect. perhaps if ~legato~ is < 1, received triggers start a note and end a note, whereas if ~legato~ is >= 1, triggers start a note, or if a note is already playing, both stop it and start the next one.
* l-systems
* tempo change curves
* ~pblend~ to blend between two patterns
* export patterns as SuperCollider ~Score~ files so they can be rendered in non-realtime
