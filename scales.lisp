(in-package :cl-patterns)

(defstruct scale name degrees tuning)

(defparameter *scales* (list))

(defun define-scale (name degrees &optional (tuning :et12) aliases) ;; FIX: warn if tuning doesn't exist
  "Define a scale and add it to the *scales* list."
  (let ((key (string-keyword name)))
    (setf *scales* (plist-set *scales*
                              key
                              (make-scale :name name
                                          :degrees degrees
                                          :tuning tuning)))
    (map nil
         (lambda (x)
           (setf *scales* (plist-set *scales* x key)))
         aliases)))

(defgeneric scale (item))

(defmethod scale ((item event))
  (scale (get-event-value item 'scale)))

(defmethod scale ((item symbol))
  (let ((scale (getf *scales* item)))
    (if (typep scale 'symbol)
        (scale scale)
        scale)))

(defmethod scale ((item string))
  (scale (alexandria:make-keyword (string-upcase item))))

(defmethod scale ((item scale))
  item)

(defstruct tuning name tuning octave-ratio)

(defparameter *tunings* (list))

(defun define-tuning (name tuning octave-ratio &optional aliases)
  "Define a tuning and add it to the *tunings* list."
  (let ((key (string-keyword name)))
    (setf *tunings* (plist-set *tunings*
                               key
                               (make-tuning :name name
                                            :tuning tuning
                                            :octave-ratio octave-ratio)))
    (map nil
         (lambda (x)
           (setf *tunings* (plist-set *tunings* x key)))
         aliases)))

(defgeneric tuning (item))

(defmethod tuning ((item event))
  (tuning (get-event-value item 'tuning)))

(defmethod tuning ((item symbol))
  (let ((tuning (getf *tunings* item)))
    (if (typep tuning 'symbol)
        (tuning tuning)
        tuning)))

(defmethod tuning ((item string))
  (tuning (alexandria:make-keyword (string-upcase item))))

(defmethod tuning ((item tuning))
  item)

(map nil
     (lambda (sd)
       (apply #'define-scale sd))
     '(("Aeolian" (0 2 3 5 7 8 10) :et12)
       ("Ahirbhairav" (0 1 4 5 7 9 10) :et12)
       ("Ajam" (0 4 8 10 14 18 22) :et24)
       ("Athar Kurd" (0 2 6 12 14 16 22) :et24)
       ("Augmented" (0 3 4 7 8 11) :et12)
       ("Augmented 2" (0 1 4 5 8 9) :et12)
       ("Bartok" (0 2 4 5 7 8 10) :et12)
       ("Bastanikar" (0 3 7 10 13 15 21) :et24)
       ("Bayati" (0 3 6 10 14 16 20) :et24)
       ("Bhairav" (0 1 4 5 7 8 11) :et12)
       ("Chinese" (0 4 6 7 11) :et12)
       ("Chromatic" (0 1 2 3 4 5 6 7 8 9 10 11) :et12)
       ("Chromatic 24" (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23) :et24)
       ("Diminished" (0 1 3 4 6 7 9 10) :et12)
       ("Diminished 2" (0 2 3 5 6 8 9 11) :et12)
       ("Dorian" (0 2 3 5 7 9 10) :et12)
       ("Egyptian" (0 2 5 7 10) :et12)
       ("Enigmatic" (0 1 4 6 8 10 11) :et12)
       ("Farahfaza" (0 4 6 10 14 16 20) :et24)
       ("Gong" (0 2 4 7 9) :et12)
       ("Harmonic Major" (0 2 4 5 7 8 11) :et12)
       ("Harmonic Minor" (0 2 3 5 7 8 11) :et12)
       ("Hex Aeolian" (0 3 5 7 8 10) :et12)
       ("Hex Dorian" (0 2 3 5 7 10) :et12)
       ("Hex Major 6" (0 2 4 5 7 9) :et12)
       ("Hex Major 7" (0 2 4 7 9 11) :et12)
       ("Hex Phrygian" (0 1 3 5 8 10) :et12)
       ("Hex Sus" (0 2 5 7 9 10) :et12)
       ("Hijaz" (0 2 8 10 14 17 20) :et24)
       ("Hijaz Descending" (0 2 8 10 14 16 20) :et24 '(:hijazdesc))
       ("hijazKar" (0 2 8 10 14 16 22) :et24)
       ("Hindu" (0 2 4 5 7 8 10) :et12)
       ("Hirajoshi" (0 2 3 7 8) :et12)
       ("Hungarian Minor" (0 2 3 6 7 8 11) :et12)
       ("Husseini" (0 3 6 10 14 17 21) :et24)
       ("Huzam" (0 3 7 9 15 17 21) :et24)
       ("Indian" (0 4 5 7 10) :et12)
       ("Ionian" (0 2 4 5 7 9 11) :et12)
       ("Iraq" (0 3 7 10 13 17 21) :et24)
       ("Iwato" (0 1 5 6 10) :et12)
       ("Jiao" (0 3 5 8 10) :et12)
       ("Jiharkah" (0 4 8 10 14 18 21) :et24)
       ("Karjighar" (0 3 6 10 12 18 20) :et24)
       ("Kijaz Kar Kurd" (0 2 8 10 14 16 22) :et24)
       ("Kumai" (0 2 3 7 9) :et12)
       ("Kurd" (0 2 6 10 14 16 20) :et24)
       ("Leading Whole Tone" (0 2 4 6 8 10 11) :et12 '(:leadingwhole))
       ("Locrian" (0 1 3 5 6 8 10) :et12)
       ("Locrian Major" (0 2 4 5 6 8 10) :et12)
       ("Lydian" (0 2 4 6 7 9 11) :et12)
       ("Lydian Minor" (0 2 4 6 7 8 10) :et12)
       ("Mahur" (0 4 7 10 14 18 22) :et24)
       ("Major" (0 2 4 5 7 9 11) :et12)
       ("Major Pentatonic" (0 2 4 7 9) :et12)
       ("Marva" (0 1 4 6 7 9 11) :et12)
       ("Melodic Major" (0 2 4 5 7 8 10) :et12)
       ("Melodic Minor" (0 2 3 5 7 9 11) :et12)
       ("Melodic Minor Descending" (0 2 3 5 7 8 10) :et12 '(:melodicminordesc))
       ("Minor Pentatonic" (0 3 5 7 10) :et12)
       ("Mixolydian" (0 2 4 5 7 9 10) :et12)
       ("Murassah" (0 4 6 10 12 18 20) :et24)
       ("Mustar" (0 5 7 11 13 17 21) :et24)
       ("Nahawand" (0 4 6 10 14 16 22) :et24)
       ("Nahawand Descending" (0 4 6 10 14 16 20) :et24 '(:nahawanddesc))
       ("Nairuz" (0 4 7 10 14 17 20) :et24)
       ("Natural Minor" (0 2 3 5 7 8 10) :et12 '(:minor))
       ("Nawa Athar" (0 4 6 12 14 16 22) :et24)
       ("Neapolitan Major" (0 1 3 5 7 9 11) :et12)
       ("Neapolitan Minor" (0 1 3 5 7 8 11) :et12)
       ("Nikriz" (0 4 6 12 14 18 20) :et24)
       ("Partch Otonality 1" (0 8 14 20 25 34) :partch '(:partcho1))
       ("Partch Otonality 2" (0 7 13 18 27 35) :partch '(:partcho2))
       ("Partch Otonality 3" (0 6 12 21 29 36) :partch '(:partcho3))
       ("Partch Otonality 4" (0 5 15 23 30 37) :partch '(:partcho4))
       ("Partch Otonality 5" (0 10 18 25 31 38) :partch '(:partcho5))
       ("Partch Otonality 6" (0 9 16 22 28 33) :partch '(:partcho6))
       ("Partch Utonality 1" (0 9 18 23 29 35) :partch '(:partchu1))
       ("Partch Utonality 2" (0 8 16 25 30 36) :partch '(:partchu2))
       ("Partch Utonality 3" (0 7 14 22 31 37) :partch '(:partchu3))
       ("Partch Utonality 4" (0 6 13 20 28 38) :partch '(:partchu4))
       ("Partch Utonality 5" (0 5 12 18 25 33) :partch '(:partchu5))
       ("Partch Utonality 6" (0 10 15 21 27 34) :partch '(:partchu6))
       ("Pelog" (0 1 3 7 8) :et12)
       ("Phrygian" (0 1 3 5 7 8 10) :et12)
       ("Prometheus" (0 2 4 6 11) :et12)
       ("Purvi" (0 1 4 6 7 8 11) :et12)
       ("Rast" (0 4 7 10 14 18 21) :et24)
       ("Rast Descending" (0 4 7 10 14 18 20) :et24 '(:rastdesc))
       ("Ritusen" (0 2 5 7 9) :et12)
       ("Romanian Minor" (0 2 3 6 7 9 10) :et12)
       ("Saba" (0 3 6 8 12 16 20) :et24)
       ("Scriabin" (0 1 4 7 9) :et12)
       ("Shang" (0 2 5 7 10) :et12)
       ("Shawq Afza" (0 4 8 10 14 16 22) :et24)
       ("Sikah" (0 3 7 11 14 17 21) :et24)
       ("Sikah Descending" (0 3 7 11 13 17 21) :et24 '(:sikahdesc))
       ("Spanish" (0 1 4 5 7 8 10) :et12)
       ("Super Locrian" (0 1 3 4 6 8 10) :et12)
       ("Suznak" (0 4 7 10 14 16 22) :et24)
       ("Todi" (0 1 3 6 7 8 11) :et12)
       ("Ushaq Mashri" (0 4 6 10 14 17 21) :et24)
       ("Whole Tone" (0 2 4 6 8 10) :et12)
       ("Yakah" (0 4 7 10 14 18 21) :et24)
       ("Yakah Descending" (0 4 7 10 14 18 20) :et24 '(:yakahdesc))
       ("Yu" (0 3 5 7 10) :et12)
       ("Zamzam" (0 2 6 8 14 16 20) :et24)
       ("Zanjaran" (0 2 8 10 14 18 20) :et24)
       ("Zhi" (0 2 5 7 9) :et12)))

(map nil
     (lambda (sd)
       (apply #'define-tuning sd))
     '(("Equal Temperament 12" (0 1 2 3 4 5 6 7 8 9 10 11) 2 (:et12))
       ("Equal Temperament 24" (0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 5 5.5 6 6.5 7 7.5 8 8.5 9 9.5 10 10.5 11 11.5) 2 (:et24))
       ("Harry Partch" (0.0 0.21506289596715 0.53272943230144 0.84467193469678 1.1173128526978 1.5063705850063 1.6500422849992 1.8240371213406 2.0391000173077 2.3117409353087 2.6687090560374 2.9413499740384 3.1564128700055 3.4740794063398 3.8631371386483 4.1750796410437 4.3508409526165 4.7078090733451 4.9804499913461 5.1955128873133 5.5131794236476 5.8251219260429 6.1748780739571 6.4868205763524 6.8044871126867 7.0195500086539 7.2921909266549 7.6491590473835 7.8249203589563 8.1368628613517 8.5259205936602 8.8435871299945 9.0586500259616 9.3312909439626 9.6882590646912 9.9608999826923 10.175962878659 10.349957715001 10.493629414994 10.882687147302 11.155328065303 11.467270567699 11.784937104033) 2 (:partch))))
